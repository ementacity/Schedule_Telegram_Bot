import schedule
import time
import io
import telebot
import sqlite3
from telebot import types
import datetime
import threading
from bs4 import BeautifulSoup
from parsing_schedule import get_schedule_html, generate_schedule_text
from config import TOKEN, group_urls, ADMIN_ID

start_time = time.time()

conn = sqlite3.connect('database.db', check_same_thread=False)
cursor = conn.cursor()
lock = threading.Lock()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        group_name TEXT,
        registration_date TEXT,
        settings_classroom INTEGER DEFAULT 1,
        settings_teacher INTEGER DEFAULT 1,
        settings_display_days INTEGER DEFAULT 7,
        send_schedule INTEGER DEFAULT 1
    )
''')
conn.commit()

bot = telebot.TeleBot(TOKEN)


@bot.message_handler(
    func=lambda message: message.text in {"üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "‚Ü©Ô∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"} and message.from_user.id in [
        ADMIN_ID])
def admin_panel(message):
    user_id = message.from_user.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üì§ –†–∞—Å—Å—ã–ª–∫–∞"))
    markup.row(types.KeyboardButton("üì• –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"))
    markup.row(types.KeyboardButton("üìä –í—ã—Å–ª–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"))
    markup.row(types.KeyboardButton("‚Ü©Ô∏è –í –º–µ–Ω—é"))

    bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üìä –í—ã—Å–ª–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
def send_database(message):
    user_id = message.from_user.id

    if user_id not in [ADMIN_ID]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    with lock:
        cursor.execute('SELECT * FROM users')
        all_users = cursor.fetchall()

    database_text = "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è | –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è | –ò–º—è | –§–∞–º–∏–ª–∏—è | –ì—Ä—É–ø–ø–∞ | –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ | " \
                    "–ö–∞–±–∏–Ω–µ—Ç—ã | –£—á–∏—Ç–µ–ª—è | –î–Ω–∏ | –†–∞—Å—Å—ã–ª–∫–∞\n"

    for user_data in all_users:
        user_id, username, first_name, last_name, group_name, registration_date, \
            settings_classroom, settings_teacher, settings_display_days, send_schedule = user_data

        database_text += (
            f"{user_id} | {username} | {first_name} | {last_name} | {group_name} | {registration_date} | "
            f"{settings_classroom} | {settings_teacher} | {settings_display_days} | {send_schedule}\n"
        )

    with io.StringIO(database_text) as f:
        f.name = "user_database.txt"
        bot.send_document(user_id, f)

    bot.send_message(user_id, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≤–∏–¥–µ .txt —Ñ–∞–π–ª–∞.")


@bot.message_handler(func=lambda message: message.text == "üì§ –†–∞—Å—Å—ã–ª–∫–∞")
def send_broadcast(message):
    user_id = message.from_user.id

    if user_id not in {ADMIN_ID}:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):")

    bot.register_next_step_handler(message, process_broadcast)


def process_broadcast(message):
    broadcast_message = message.text

    if broadcast_message == "/cancel":
        return

    with lock:
        cursor.execute('SELECT user_id FROM users')
        all_users = cursor.fetchall()

    for user_data in all_users:
        user_id = user_data[0]

        try:
            bot.send_message(user_id, broadcast_message)
        except Exception as e:
            print(f"Error sending broadcast to user {user_id}: {e}")
            remove_user_from_db(user_id, cursor, conn)


def remove_user_from_db(user_id, cursor, conn):
    cursor.execute("DELETE FROM users WHERE user_id=?", (user_id,))
    conn.commit()
    print(f"User {user_id} removed from the database.")


@bot.message_handler(func=lambda message: message.text == "üì• –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
def get_statistics(message):
    user_id = message.from_user.id

    if user_id not in [ADMIN_ID]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    with lock:
        cursor.execute('SELECT COUNT(user_id) FROM users')
        user_count = cursor.fetchone()[0]

    current_time = time.time()
    uptime_seconds = current_time - start_time
    uptime_str = str(datetime.timedelta(seconds=int(uptime_seconds)))

    statistics_text = (
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
        f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {uptime_str}"
    )

    bot.send_message(user_id, statistics_text)


def send_navigation_menu(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    markup.row(types.KeyboardButton("üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"))
    markup.row(types.KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))

    if user_id in [ADMIN_ID]:
        markup.row(types.KeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))

    bot.send_message(user_id, "–ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", reply_markup=markup)


@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name

    with lock:
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user_data = cursor.fetchone()

    if user_data:
        send_navigation_menu(user_id)
        bot.send_message(user_id, f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    else:
        keyboard = types.InlineKeyboardMarkup()

        for group, url in group_urls.items():
            button = types.InlineKeyboardButton(text=group, callback_data=group)
            keyboard.add(button)

        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    user_id = call.from_user.id
    username = call.from_user.username
    first_name = call.from_user.first_name
    last_name = call.from_user.last_name

    group_name = call.data

    with lock:
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user_data = cursor.fetchone()

    if user_data:
        with lock:
            cursor.execute('''
                UPDATE users
                SET group_name = ?
                WHERE user_id = ?
            ''', (group_name, user_id))
            conn.commit()

        bot.send_message(user_id, f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –¢—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª –≥—Ä—É–ø–ø—É –Ω–∞ {group_name}.")
        send_navigation_menu(user_id)
    else:
        registration_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with lock:
            cursor.execute('''
                INSERT INTO users (user_id, username, first_name, last_name, group_name, registration_date)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (user_id, username, first_name, last_name, group_name, registration_date))

            cursor.execute('''
                UPDATE users
                SET settings_classroom = 1, settings_teacher = 1
                WHERE user_id = ?
            ''', (user_id,))
            conn.commit()

        send_navigation_menu(user_id)

        bot.send_message(user_id, f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ì—Ä—É–ø–ø–∞: {group_name}")


@bot.message_handler(func=lambda message: message.text == "üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def view_schedule(message):
    user_id = message.from_user.id

    with lock:
        cursor.execute(
            'SELECT group_name, settings_teacher, settings_classroom, settings_display_days FROM users WHERE user_id = ?',
            (user_id,))
        user_data = cursor.fetchone()

    if not user_data:
        bot.send_message(user_id, "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.")
        return

    group_name, settings_teacher, settings_classroom, settings_display_days = user_data

    user_settings = {
        'settings_teacher': settings_teacher,
        'settings_classroom': settings_classroom,
        'settings_display_days': settings_display_days
    }

    url = group_urls.get(group_name)

    if not url:
        bot.send_message(user_id, f"URL –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    schedule_html = get_schedule_html(url)

    if not schedule_html:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
        return

    soup = BeautifulSoup(schedule_html, 'html.parser')
    schedule_rows = soup.find_all('tr')
    schedule_text = generate_schedule_text(schedule_rows, user_settings)

    bot.send_message(user_id, schedule_text)


@bot.message_handler(func=lambda message: message.text == "üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
def change_group(message):
    user_id = message.from_user.id

    with lock:
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user_data = cursor.fetchone()

    if user_data:
        keyboard = types.InlineKeyboardMarkup()

        for group, url in group_urls.items():
            button = types.InlineKeyboardButton(text=group, callback_data=f'{group}')
            keyboard.add(button)

        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)
    else:
        bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.")


@bot.message_handler(func=lambda message: message.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def settings_menu(message):
    user_id = message.from_user.id

    with lock:
        cursor.execute(
            'SELECT settings_classroom, settings_teacher, settings_display_days, send_schedule FROM users WHERE user_id = ?',
            (user_id,))
        user_settings = cursor.fetchone()

    if not user_settings:
        bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.")
        return

    classroom_status = '–í–∫–ª—é—á–µ–Ω–æ' if user_settings[0] == 1 else '–û—Ç–∫–ª—é—á–µ–Ω–æ'
    teacher_status = '–í–∫–ª—é—á–µ–Ω–æ' if user_settings[1] == 1 else '–û—Ç–∫–ª—é—á–µ–Ω–æ'
    schedule_days = '–í–∫–ª—é—á–µ–Ω–æ' if user_settings[3] == 1 else '–û—Ç–∫–ª—é—á–µ–Ω–æ'
    max_days = user_settings[2]

    settings_text = (
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"üë©‚Äçüè´ –£—á–∏—Ç–µ–ª—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {teacher_status}\n"
        f"üè´ –ö–∞–±–∏–Ω–µ—Ç—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {classroom_status}\n"
        f"üìÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {max_days}\n"
        f"üìÜ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {schedule_days}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(types.KeyboardButton("üë©‚Äçüè´ –£—á–∏—Ç–µ–ª—è"), types.KeyboardButton("üè´ –ö–∞–±–∏–Ω–µ—Ç—ã"))
    keyboard.row(types.KeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"), types.KeyboardButton("üìÜ –†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"))
    keyboard.row(types.KeyboardButton("‚Ü©Ô∏è –í –º–µ–Ω—é"))

    bot.send_message(user_id, settings_text, reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text in {"üë©‚Äçüè´ –£—á–∏—Ç–µ–ª—è", "üè´ –ö–∞–±–∏–Ω–µ—Ç—ã", "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π",
                                                           "üìÜ –†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"})
def change_settings(message):
    user_id = message.from_user.id
    selected_setting = message.text

    if selected_setting == "üë©‚Äçüè´ –£—á–∏—Ç–µ–ª—è":
        update_toggle_setting(user_id, "settings_teacher", "üë©‚Äçüè´ –£—á–∏—Ç–µ–ª—è")
    elif selected_setting == "üè´ –ö–∞–±–∏–Ω–µ—Ç—ã":
        update_toggle_setting(user_id, "settings_classroom", "üè´ –ö–∞–±–∏–Ω–µ—Ç—ã")
    elif selected_setting == "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π":
        send_days_count_menu(user_id)
    elif selected_setting == "üìÜ –†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è":
        update_toggle_setting(user_id, "send_schedule", "üìÜ –†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    else:
        return


def update_toggle_setting(user_id, setting_key, setting_name):
    with lock:
        cursor.execute(f'SELECT {setting_key} FROM users WHERE user_id = ?', (user_id,))
        current_setting_value = cursor.fetchone()[0]

    new_setting_value = 1 if current_setting_value == 0 else 0

    with lock:
        cursor.execute(f'UPDATE users SET {setting_key} = ? WHERE user_id = ?', (new_setting_value, user_id))
        conn.commit()

    bot.send_message(user_id, f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{setting_name}' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")


def send_days_count_menu(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    for days_count in [1, 3, 7, 14]:
        markup.add(types.KeyboardButton(str(days_count)))
    markup.add(types.KeyboardButton("‚Ü©Ô∏è –í –º–µ–Ω—é"))

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text.isdigit() and int(message.text) in [1, 3, 7, 14])
def handle_days_count_selection(message):
    user_id = message.from_user.id
    days_count = int(message.text)

    with lock:
        cursor.execute('UPDATE users SET settings_display_days = ? WHERE user_id = ?', (days_count, user_id))
        conn.commit()

    bot.send_message(user_id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {days_count}.")
    send_navigation_menu(user_id)


@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
def about(message):
    user_id = message.from_user.id

    about_text = (
        f"‚ÑπÔ∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\n"
        f"–†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ 6:00 –∏ 18:00.\n"
        f"–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞.\n"
        f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –±–∞–≥ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –∏–¥–µ—é, —Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ –º–µ–Ω—é."
    )

    bot.send_message(user_id, about_text)


@bot.message_handler(func=lambda message: message.text in {"‚Ü©Ô∏è –í –º–µ–Ω—é"})
def back_to_menu(message):
    user_id = message.from_user.id
    send_navigation_menu(user_id)


def send_schedule_to_all_users():
    with lock:
        cursor.execute(
            'SELECT user_id, group_name, settings_teacher, settings_classroom, settings_display_days, send_schedule FROM users')
        all_users = cursor.fetchall()

    for user_data in all_users:
        user_id, group_name, settings_teacher, settings_classroom, settings_display_days, send_schedule = user_data

        if send_schedule == 1:
            user_settings = {
                'settings_teacher': settings_teacher,
                'settings_classroom': settings_classroom,
                'settings_display_days': settings_display_days
            }

            url = group_urls.get(group_name)

            if url:
                schedule_html = get_schedule_html(url)

                if schedule_html:
                    soup = BeautifulSoup(schedule_html, 'html.parser')
                    schedule_rows = soup.find_all('tr')
                    schedule_text = generate_schedule_text(schedule_rows, user_settings)

                    try:
                        bot.send_message(user_id, schedule_text)
                    except Exception as e:
                        print(f"Error sending broadcast to user {user_id}: {e}")
                        remove_user_from_db(user_id, cursor, conn)

                    time.sleep(0.1)


schedule.every().day.at("06:00").do(send_schedule_to_all_users)
schedule.every().day.at("18:00").do(send_schedule_to_all_users)


def scheduled_job():
    while True:
        schedule.run_pending()
        time.sleep(1)


def bot_polling_and_schedule():
    threading.Thread(target=scheduled_job).start()

    while True:
        try:
            bot.polling(none_stop=True, timeout=90)
        except Exception as e:
            print(datetime.datetime.now(), e)
            time.sleep(5)
            continue


if __name__ == "__main__":
    bot_polling_and_schedule()
